#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/types.h>       
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <pthread.h>

char SERVER_IP[20] = "";
char SERVER_PORT[20] = "";

int client_sock;
int server_sock;

void interrupt(int arg){
	printf("\nYou typed Ctrl + C\n");
	printf("Bye\n");

	close(client_sock);
	exit(1);
}


int check_string(char* string){
	int length= strlen(string);
	
	for(int i=0;i<length;i++){
	
		if(string[i]<'0'||string[i]>'9'){
		
			return 0;
		}
	
	}
	return 1;

}

void *readd(void *arg){
char buf[100];
	
	while(1){
		memset(buf, 0, 100);
		int len = read(client_sock, buf, 99);
		if (len == 0){
			printf("INFO :: Server Disconnected\n");
			break;
		}
		int result = check_string(buf);
		if(result){
			int ret = atoi(buf);
			printf("%d\n",ret*2);
		}else{
		printf("%s\n", buf);
		}
	}
}
void *writee(void *arg){
char buf[100];
	
while(1){
	memset(buf, 0, 100);
		scanf("%s", buf);
		if (!strcmp(buf, "exit")){
			write(client_sock, buf, strlen(buf));
			break;
		}
		write(client_sock, buf, strlen(buf));
	
}
}

int main(int argc,char* argv[]){
	if(argv[1]==NULL||argv[2]==NULL){
		printf("ERROR Input IP addr, Port num\n");
		exit(1);
	}
	strcpy(SERVER_IP,argv[1]);
	strcpy(SERVER_PORT,argv[2]);
	signal(SIGINT, interrupt);

	client_sock = socket(AF_INET, SOCK_STREAM, 0);
	if (client_sock == -1){
		printf("ERROR :: 1_Socket Create Error\n");
		exit(1);
	}

	struct sockaddr_in server_addr = {0};
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = inet_addr(SERVER_IP);
	server_addr.sin_port = htons(atoi(SERVER_PORT));
	
	socklen_t server_addr_len = sizeof(server_addr);

	if (connect(client_sock, (struct sockaddr *)&server_addr, server_addr_len) == -1){
		printf("ERROR :: 2_Connect Error\n");
		exit(1);
	}

	char buf[100];
	
	pthread_t t1;
	pthread_t t2;
	pthread_create(&t1, NULL, readd,NULL);
	pthread_create(&t2, NULL, writee,NULL);
	pthread_join(t1, NULL);
	pthread_join(t2, NULL);
		
	while(1){
	/*
		memset(buf, 0, 100);

		int len = read(client_sock, buf, 99);
		if (len == 0){
			printf("INFO :: Server Disconnected\n");
			break;
		}
		printf("%s\n", buf);

		scanf("%s", buf);
		if (!strcmp(buf, "exit")){
			write(client_sock, buf, strlen(buf));
			break;
		}
		write(client_sock, buf, strlen(buf));
		*/
	}

	close(client_sock);
	return 0;
}
