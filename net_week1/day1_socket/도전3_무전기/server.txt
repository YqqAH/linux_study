#include <stdio.h>
#include <sys/types.h>      
#include <sys/socket.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>
char PORT[20] = "";

int server_sock;
int client_sock;

void interrupt(int arg){
	printf("\nYou typed Ctrl + C\n");
	printf("Bye\n");

	close(client_sock);
	close(server_sock);
	exit(1);
}

void removeEnterChar(char *buf){
	int len = strlen(buf);
	for (int i = len - 1; i >= 0; i--){
		if (buf[i] == '\n'){
			buf[i] = '\0';
			break;
		}
	}
}

int check_string(char* string){
	int length= strlen(string);
	
	for(int i=0;i<length;i++){
	
		if(string[i]<'0'||string[i]>'9'){
		
			return 0;
		}
	
	}
	return 1;

}

void *readd(void *arg){
char buf[100];
	
while(1){
	memset(buf, 0, 100);
			int len = read(client_sock, buf, 99);
			removeEnterChar(buf);

			if (len == 0){
				printf("INFO :: Disconnect with client... BYE\n");
				break;
			}
			int result = check_string(buf);
		if(result){
			int ret = atoi(buf);
			printf("%d\n",ret*2);
		}else{
		printf("%s\n", buf);
		}
}
}
void *writee(void *arg){
char buf[100];
	
while(1){
		memset(buf, 0, 100);
			scanf("%s", buf);
			if (!strcmp(buf, "exit")){
				write(client_sock, buf, strlen(buf));
				break;
			}
			write(client_sock, buf, strlen(buf));
			
}
}

int main(int argc,char*argv[]){
	if(argv[1]==NULL){
		printf("ERROR Write a Port Number\n");
		exit(1);
	}
	strcpy(PORT,argv[1]);
	signal(SIGINT, interrupt);

	server_sock = socket(AF_INET, SOCK_STREAM, 0);
	if (server_sock == -1){
		printf("ERROR :: 1_Socket Create Error\n");
		exit(1);
	}

	int optval = 1;
	setsockopt(server_sock, SOL_SOCKET, SO_REUSEADDR, (void *)&optval, sizeof(optval));

	struct sockaddr_in server_addr = {0};
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	server_addr.sin_port = htons(atoi(PORT));
	socklen_t server_addr_len = sizeof(server_addr);

	if (bind(server_sock, (struct sockaddr *)&server_addr, server_addr_len) == -1){
		printf("ERROR :: 2_bind Error\n");
		exit(1);
	}

	if (listen(server_sock, 5) == -1){
		printf("ERROR :: 3_listen Error");
		exit(1);
	}

	client_sock = 0;
	struct sockaddr_in client_addr = {0};
	socklen_t client_addr_len = sizeof(client_addr);

	while (1){
		memset(&client_addr, 0, client_addr_len);

		client_sock = accept(server_sock, (struct sockaddr *)&client_addr, &client_addr_len);
		if (client_sock == -1){
			printf("ERROR :: 4_accept Error\n");
			break;
		}

		char buf[100];
	pthread_t t1;
	pthread_t t2;
	pthread_create(&t1, NULL, readd,NULL);
	pthread_create(&t2, NULL, writee,NULL);
	pthread_join(t1, NULL);
	pthread_join(t2, NULL);
		while (1){
		/*
			memset(buf, 0, 100);
			scanf("%s", buf);
			if (!strcmp(buf, "exit")){
				write(client_sock, buf, strlen(buf));
				break;
			}
			write(client_sock, buf, strlen(buf));
			
			memset(buf, 0, 100);
			int len = read(client_sock, buf, 99);
			removeEnterChar(buf);

			if (len == 0){
				printf("INFO :: Disconnect with client... BYE\n");
				break;
			}
			printf("%s\n",buf);
			if (!strcmp("exit", buf)){
				printf("INFO :: Client want close... BYE\n");
				break;
			}
			*/
		}
		close(client_sock);
	}
	close(server_sock);
	return 0;
}
